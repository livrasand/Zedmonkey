function openOptions() {
    chrome.runtime.openOptionsPage()
}

function initializeUI() {
    document.getElementById("folder-button").addEventListener("click", toggleAllScriptsView);
    document.getElementById("cloud-button").addEventListener("click", toggleUpdatesView);
    document.getElementById("refresh-button").addEventListener("click", refreshPopup);
    document.getElementById("injection-toggle").addEventListener("change", toggleInjection);
    document.getElementById("open-extension-page").addEventListener("click", openExtensionPage);
    document.getElementById("add-script").addEventListener("click", showAddScriptForm);
    document.getElementById("import-script").addEventListener("click", importScript);
    
    chrome.storage.sync.get("injectionEnabled", e => {
        e = !1 !== e.injectionEnabled;
        document.getElementById("injection-toggle").checked = e
    });
    
    checkRestrictedSite();
    checkForNoScripts();
    checkForUpdates();
}

function toggleAllScriptsView() {
    var e = document.getElementById("all-scripts-view"),
        t = document.getElementById("matched-scripts-view"),
        r = document.getElementById("updates-view");
    (e.classList.contains("hidden") ? (e.classList.remove("hidden"), t.classList.add("hidden"), r.classList.add("hidden"), loadAllScripts) : (e.classList.add("hidden"), t.classList.remove("hidden"), r.classList.add("hidden"), loadMatchedScripts))()
}

function toggleUpdatesView() {
    var e = document.getElementById("updates-view"),
        t = document.getElementById("matched-scripts-view"),
        r = document.getElementById("all-scripts-view");
    (e.classList.contains("hidden") ? (e.classList.remove("hidden"), t.classList.add("hidden"), r.classList.add("hidden"), loadUpdates) : (e.classList.add("hidden"), t.classList.remove("hidden"), r.classList.add("hidden"), loadMatchedScripts))()
}

function checkRestrictedSite() {
    chrome.tabs.query({
        active: !0,
        currentWindow: !0
    }, e => {
        if (e && e[0]) {
            let t = e[0].url;
            var e = [/^chrome:\/\//, /^chrome-extension:\/\//, /^moz-extension:\/\//, /^about:/, /^edge:/, /^opera:/, /^extension:/, /^file:\/\/.*\/AppData\/Local\//, /^https:\/\/chrome\.google\.com\/webstore/, /^https:\/\/addons\.mozilla\.org/, /^https:\/\/microsoftedge\.microsoft\.com\/addons/].some(e => e.test(t)),
                r = document.getElementById("restricted-site-alert");
            e ? (r.classList.remove("hidden"), document.getElementById("matched-scripts-list").innerHTML = '<div class="empty-state">Scripts cannot run on this page</div>') : r.classList.add("hidden")
        } else console.error("No active tab found")
    })
}

function refreshPopup() {
    var e = document.getElementById("updates-view"),
        t = document.getElementById("all-scripts-view");
    (e.classList.contains("hidden") ? t.classList.contains("hidden") ? (loadMatchedScripts(), checkForNoScripts) : loadAllScripts : loadUpdates)(), chrome.tabs.query({
        active: !0,
        currentWindow: !0
    }, e => {
        e[0] && document.getElementById("userscript-alert") && checkForUserscripts(e[0].url)
    }), checkRestrictedSite(), checkForUpdates()
}

function showAddScriptForm() {
    chrome.tabs.create({
        url: chrome.runtime.getURL("editor/editor.html")
    })
}

function toggleInjection(e) {
    const enabled = e.target.checked;
    chrome.storage.local.set({ injectionEnabled: enabled }, () => {
        // Forzar actualizaciÃ³n de todos los scripts
        chrome.runtime.sendMessage({ 
            action: "refreshAllTabs"
        });
    });
}

function openExtensionPage(e) {
    e.preventDefault(), chrome.runtime.openOptionsPage()
}

function openEditorPage(e) {
    e.preventDefault(), chrome.tabs.create({
        url: chrome.runtime.getURL("editor/editor.html")
    })
}

function checkForUserscripts(e) {
    let n = document.getElementById("userscript-alert");
    n ? chrome.tabs.query({
        active: !0,
        currentWindow: !0
    }, e => {
        e && e[0] ? chrome.tabs.sendMessage(e[0].id, {
            action: "detectUserscript"
        }, e => {
            var t, r;
            chrome.runtime.lastError ? console.log("Content script not ready:", chrome.runtime.lastError.message) : e && e.detected && (n.classList.remove("hidden"), t = extractScriptName(e.scriptContent), (r = document.getElementById("detected-script-name")) && (r.textContent = t || "Unknown Script"), n.dataset.scriptContent = e.scriptContent)
        }) : console.error("No active tab found")
    }) : console.log("Userscript alert element not found in DOM")
}

function extractScriptName(e) {
    var t;
    return e ? (t = e.match(/@name\s+(.+?)(\n|$)/)) && t[1] ? t[1].trim() : (t = e.match(/\[script\][\s\S]*?name\s*=\s*["'](.+?)["']/)) && t[1] ? t[1].trim() : "Unknown Script" : null
}

function checkForNoScripts() {
    document.getElementById("matched-scripts-view").classList.contains("hidden") || chrome.tabs.query({
        active: !0,
        currentWindow: !0
    }, e => {
        if (e && e[0]) {
            e = e[0].url;
            if (!isRestrictedSite(e)) {
                let r = "";
                try {
                    r = new URL(e).hostname
                } catch (e) {
                    return void console.error("Invalid URL:", e)
                }
                chrome.runtime.sendMessage({
                    action: "getMatchedScripts",
                    url: e
                }, e => {
                    var e = e?.scripts || [],
                        t = document.getElementById("no-scripts-alert");
                    0 === e.length ? (t.classList.remove("hidden"), document.getElementById("search-openuserjs").href = "https://openuserjs.org/?q=" + r, document.getElementById("search-greasyfork").href = "https://greasyfork.org/scripts/search?q=" + r, document.getElementById("search-github").href = `https://github.com/search?q=${r}+userscript&type=code`, document.getElementById("search-userscripts-zone").href = "https://www.userscript.zone/search?q=" + r, document.querySelectorAll(".search-options a").forEach(e => {
                        e.addEventListener("click", e => {
                            e.preventDefault(), chrome.tabs.create({
                                url: e.target.href
                            })
                        })
                    })) : t.classList.add("hidden")
                })
            }
        } else console.error("No active tab found")
    })
}

function isRestrictedSite(t) {
    return [/^chrome:\/\//, /^chrome-extension:\/\//, /^moz-extension:\/\//, /^about:/, /^edge:/, /^opera:/, /^extension:/, /^file:\/\/.*\/AppData\/Local\//, /^https:\/\/chrome\.google\.com\/webstore/, /^https:\/\/addons\.mozilla\.org/, /^https:\/\/microsoftedge\.microsoft\.com\/addons/].some(e => e.test(t))
}

function showAddScriptForm() {
    chrome.tabs.create({
        url: chrome.runtime.getURL("editor/editor.html")
    })
}

function importScript() {
    var e = document.createElement("input");
    e.type = "file", e.accept = ".js,.user.js", e.onchange = e => {
        var t, e = e.target.files[0];
        e && ((t = new FileReader).onload = e => {
            chrome.storage.local.set({
                tempScriptContent: e.target.result
            }, function() {
                chrome.tabs.create({
                    url: chrome.runtime.getURL("editor/editor.html?loadTemp=true")
                })
            })
        }, t.readAsText(e))
    }, e.click()
}

function installDetectedScript() {
    var e = document.getElementById("userscript-alert"),
        t = e.dataset.scriptContent;
    t ? (console.log("Storing script content for editor:", t.substring(0, 100) + "..."), chrome.storage.local.set({
        tempScriptContent: t
    }, function() {
        chrome.runtime.lastError ? console.error("Error storing script content:", chrome.runtime.lastError) : chrome.tabs.create({
            url: chrome.runtime.getURL("editor/editor.html?loadTemp=true")
        })
    }), e.classList.add("hidden")) : console.error("No script content found in userscript-alert element")
}

function loadAllScripts() {
    let t = document.getElementById("all-scripts-list");
    chrome.runtime.sendMessage({
        action: "getScripts"
    }, e => {
        chrome.runtime.lastError ? (console.error("Error loading scripts:", chrome.runtime.lastError), t.innerHTML = '<div class="empty-state">Error loading scripts</div>') : 0 === (e = e && e.scripts ? e.scripts : []).length ? t.innerHTML = '<div class="empty-state">No scripts installed</div>' : (t.innerHTML = "", e.forEach(e => {
            t.appendChild(createScriptElement(e, !0))
        }))
    })
}

function loadMatchedScripts() {
    let r = document.getElementById("matched-scripts-list");
    chrome.tabs.query({
        active: !0,
        currentWindow: !0
    }, e => {
        e = e[0];
        chrome.runtime.sendMessage({
            action: "getMatchedScripts",
            url: e.url
        }, e => {
            e = e.scripts || [];
            0 === e.length ? r.innerHTML = '<div class="empty-state">No scripts match this page</div>' : (r.innerHTML = "", e.forEach(e => {
                var t = !0 === e.matchedInSubframe;
                r.appendChild(createScriptElement(e, !1, t))
            }))
        })
    })
}

function checkForUpdates() {
    chrome.runtime.sendMessage({
        action: "checkUpdates"
    }, e => {
        var t;
        chrome.runtime.lastError ? console.error("Error checking updates:", chrome.runtime.lastError) : (e = e && e.updates ? e.updates : [], t = document.getElementById("update-badge"), 0 < e.length ? (t.textContent = e.length, t.classList.remove("hidden")) : t.classList.add("hidden"))
    })
}

function loadUpdates() {
    let o = document.getElementById("updates-list");
    chrome.runtime.sendMessage({
        action: "getUpdates"
    }, e => {
        e = e.updates || [];
        0 === e.length ? o.innerHTML = '<div class="empty-state">No updates available</div>' : (o.innerHTML = "", e.forEach(e => {
            var t = document.createElement("div"),
                r = (t.className = "script-item", document.createElement("div")),
                n = (r.className = "script-info", document.createElement("div")),
                c = (n.className = "script-name", n.textContent = e.metadata.name, document.createElement("div")),
                s = (c.className = "script-version", c.textContent = `v${e.currentVersion} â v` + e.newVersion, document.createElement("div")),
                i = (s.className = "script-actions", document.createElement("button"));
            i.className = "btn-icon update", i.innerHTML = "â", i.title = "Update script", i.addEventListener("click", () => updateScript(e.id)), r.appendChild(n), r.appendChild(c), s.appendChild(i), t.appendChild(r), t.appendChild(s), o.appendChild(t)
        }))
    })
}

function createScriptElement(t, r = !0, e = !1) {
    let n = document.createElement("div");
    n.className = "script-item";
    var c, s, i, o = document.createElement("div"),
        a = (o.className = "script-info", document.createElement("div")),
        d = (a.className = "script-name-container", document.createElement("span")),
        l = (d.className = "script-name", d.textContent = t.metadata.name, document.createElement("span")),
        e = (l.className = "script-type " + getScriptType(t), l.textContent = getScriptType(t).toUpperCase(), e && ((e = document.createElement("span")).className = "script-subframe", e.textContent = "sub", a.appendChild(e)), document.createElement("div")),
        m = (e.className = "script-version", e.textContent = "v" + t.metadata.version, document.createElement("div"));
    return m.className = "script-actions", r && ((c = document.createElement("label")).className = "script-toggle", (s = document.createElement("input")).type = "checkbox", s.checked = !1 !== t.enabled, s.addEventListener("change", e => {
        toggleScript(t.id, e.target.checked), e.stopPropagation()
    }), (i = document.createElement("span")).className = "script-toggle-slider", c.appendChild(s), c.appendChild(i), m.appendChild(c)), a.appendChild(d), a.appendChild(l), o.appendChild(a), o.appendChild(e), n.appendChild(o), n.appendChild(m), n.addEventListener("click", () => {
        var e;
        r && ((e = n.querySelector('input[type="checkbox"]')).checked = !e.checked, toggleScript(t.id, e.checked))
    }), n
}

function getScriptType(e) {
    return "css" === e.metadata.type || e.content && e.content.trim().startsWith("/* ==UserStyle== */") || e.metadata.name.toLowerCase().includes(".css") ? "css" : "js"
}

function toggleScript(e, t) {
    chrome.runtime.sendMessage({
        action: "toggleScript",
        scriptId: e,
        enabled: t
    }, e => {
        e.success && !1 === document.getElementById("matched-scripts-view").classList.contains("hidden") && loadMatchedScripts()
    })
}

function updateScript(e) {
    chrome.runtime.sendMessage({
        action: "updateScript",
        scriptId: e
    }, e => {
        e.success ? (loadUpdates(), checkForUpdates()) : alert("Error updating script: " + e.error)
    })
}

document.addEventListener("DOMContentLoaded", async () => {
    // 1. Inicializar UI primero
    initializeUI();

    // 2. Obtener pestaÃ±a activa
    const [activeTab] = await chrome.tabs.query({
        active: true,
        currentWindow: true
    });

    // 3. Cargar scripts coincidentes para la pestaÃ±a actual
    loadMatchedScripts();

    // 4. Verificar si hay userscripts detectables (si existe el elemento y hay pestaÃ±a activa)
    const userScriptAlert = document.getElementById("userscript-alert");
    if (userScriptAlert && activeTab) {
        checkForUserscripts(activeTab.url);
    }
});

document.getElementById('open-dashboard').addEventListener('click', function() {
    chrome.tabs.create({
        url: chrome.runtime.getURL('editor/editor.html')
    });
});
import{parseUserscriptMetadata,validateMetadataBlock,validateVersion,getLocalizedValue,normalizeMatchPattern,requiresPrivileges,createTestScript}from"./lib/parser.js";async function getScripts(){return console.log("getScripts: Attempting to retrieve scripts from storage."),new Promise((o,n)=>{chrome.storage.local.get("scripts",e=>{if(chrome.runtime.lastError)console.error("getScripts: Chrome runtime error:",chrome.runtime.lastError),n(new Error(chrome.runtime.lastError.message));else try{var t=e.scripts||[],r=(console.log("getScripts: Retrieved scripts:",t.length,"scripts"),t.filter(e=>e&&"object"==typeof e?e.id?(e.metadata||(console.warn("getScripts: Script without metadata detected:",e),e.metadata={name:"Unnamed Script",version:"1.0"}),!0):(console.warn("getScripts: Script without ID detected:",e),!1):(console.warn("getScripts: Invalid script object detected:",e),!1)));r.length!==t.length&&console.warn(`getScripts: Filtered out ${t.length-r.length} invalid scripts`),o(r)}catch(e){console.error("getScripts: Error processing scripts:",e),n(e)}})})}async function saveScript(n){return console.log("saveScript: Attempting to save script:",n.metadata?n.metadata.name:n.id),new Promise((r,o)=>{getScripts().then(e=>{n.id||(n.id=Date.now().toString()),n.enabled=!1!==n.enabled;var t=e.findIndex(e=>e.id===n.id);0<=t?e[t]=n:e.push(n),chrome.storage.local.set({scripts:e},()=>{chrome.runtime.lastError?(console.error("saveScript: Error saving script:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("saveScript: Script saved successfully:",n.metadata?n.metadata.name:n.id),r(n))})})})}async function removeScript(o){return console.log("removeScript: Attempting to remove script with ID:",o),new Promise((t,r)=>{getScripts().then(e=>{e=e.filter(e=>e.id!==o),chrome.storage.local.set({scripts:e},()=>{chrome.runtime.lastError?(console.error("removeScript: Error removing script:",chrome.runtime.lastError),r(chrome.runtime.lastError)):(console.log("removeScript: Script removed successfully with ID:",o),t())})})})}function parseZedataBlock(e){try{var t,r,o=e.match(/\/\*\s*zedata\s*(\{[\s\S]*?\})\s*\*\//i);return o&&o[1]?(t=o[1],{name:(r=JSON.parse(t)).name||"Untitled Script",version:r.version||"1.0",match:r.match||["*://*/*"],description:r.description||"",author:r.author||"",...r}):null}catch(e){return console.error("parseZedataBlock: Error parsing Zedata block:",e),null}}function globToRegex(e){return e.replace(/\*/g,".*").replace(/\?/g,".").replace(/\/\*\*\//g,"/.*/").replace(/:\/\//g,"://").replace(/\./g,"\\.")}function isScriptMatchingUrl(e,r){if(console.log(`[Zedmonkey] Checking script "${e.metadata.name}" against URL: `+r),e.metadata&&!1!==e.enabled){var{matches:t=[],includes:o=[],excludes:n=[],excludeMatches:a=[]}=e.metadata,n=[...n,...a];if(!n.some(t=>{try{return matchesPattern(r,t)?(console.log(`[Zedmonkey] URL ${r} EXCLUIDA para el script "${e.metadata.name}" por la regla: `+t),!0):!1}catch(e){return console.warn(`[Zedmonkey] Error processing exclude pattern "${t}":`,e),!1}})){a=[...t,...o];if(!(0<a.length))return console.log(`[Zedmonkey] No @match or @include rules for script "${e.metadata.name}", assuming all URLs.`),!0;if(a.some(t=>{try{return matchesPattern(r,t)?(console.log(`[Zedmonkey] URL ${r} INCLUIDA para el script "${e.metadata.name}" por la regla: `+t),!0):!1}catch(e){return console.warn(`[Zedmonkey] Error processing include pattern "${t}":`,e),!1}}))return!0;console.log(`[Zedmonkey] No matching include rule found for script "${e.metadata.name}".`)}}else console.log(`[Zedmonkey] Script "${e.metadata.name}" skipped due to missing metadata or being disabled.`);return!1}function matchesPattern(e,t){t=normalizeMatchPattern(t);return(isValidMatchPattern(t)?matchesMatchPattern:matchesGlobPattern)(e,t)}function isValidMatchPattern(e){return/^(\*|https?|file|ftp):\/\/(\*|\*\.[^*\/]+|[^*\/]+)(\/.*)$/.test(e)}function matchesMatchPattern(e,t){try{var r=new URL(e),[,o,n,a]=t.match(/^([^:]+):\/\/([^\/]+)(.*)$/);if("*"!==o&&o!==r.protocol.slice(0,-1))return!1;if("*"!==n)if(n.startsWith("*.")){var s=n.slice(2);if(!r.hostname.endsWith(s)||r.hostname!==s&&!r.hostname.endsWith("."+s))return!1}else if(n!==r.hostname)return!1;var c=a.replace(/\*/g,".*");return new RegExp("^"+c+"$").test(r.pathname+r.search+r.hash)}catch(e){return console.warn("Error parsing URL or pattern:",e),!1}}function matchesGlobPattern(e,t){return new RegExp("^"+globToRegex(t)+"$").test(e)}async function injectWithRecovery(e,t,r,o){console.log(`injectWithRecovery: Attempting injection for script "${e.metadata.name}" into frame ${o}.`);for(var n of t)try{return console.log("injectWithRecovery: Attempting injection with method: "+n.name),await n.inject(e,r,o),void console.log("injectWithRecovery: Injection successful with method: "+n.name)}catch(e){console.warn(`injectWithRecovery: Method ${n.name} failed for frame ${o}:`,e),console.error(`injectWithRecovery: Detailed error for ${n.name}:`,e)}throw new Error("injectWithRecovery: All injection methods failed for frame "+o)}function determineInjectionMethod(e){return e&&e.hasStrictCSP?console.log("determineInjectionMethod: Site has strict CSP, preferring PAGE world."):console.log("determineInjectionMethod: Preferring PAGE world."),"PAGE"}let injectionMethods={PAGE:{name:"Page (MAIN world) Injection",inject:async(e,t,r)=>{console.log(`injectionMethods.PAGE: Executing script in MAIN world for tab ${t}, frame ${r}.`),await chrome.scripting.executeScript({target:{tabId:t,frameIds:[r]},files:["lib/gmapi.js"],world:"MAIN"}),await chrome.scripting.executeScript({target:{tabId:t,frameIds:[r]},func:(e,t)=>{t&&(window.__ZEDMONKEY_SCRIPT_META__=t,window.__ZEDMONKEY_SCRIPT_UUID__="zedmonkey-"+Date.now()+"-"+Math.random().toString(36).substr(2,9));t=document.createElement("script");t.textContent=e,(document.head||document.documentElement).appendChild(t),t.remove()},args:[e.content,e.metadata],world:"MAIN"})}},CONTENT:{name:"Content (ISOLATED world) Injection",inject:async(script,tabId,frameId)=>{console.log(`injectionMethods.CONTENT: Executing script in ISOLATED world for tab ${tabId}, frame ${frameId}.`),await chrome.scripting.executeScript({target:{tabId:tabId,frameIds:[frameId]},func:content=>{eval(content)},args:[script.content],world:"ISOLATED"})}},XHR_BLOB:{name:"XHR Blob Injection",inject:async(e,t,r)=>{console.log(`injectionMethods.XHR_BLOB: Executing script via XHR Blob for tab ${t}, frame ${r}.`),await chrome.scripting.executeScript({target:{tabId:t,frameIds:[r]},func:async e=>{e=new Blob([e],{type:"application/javascript"});let t=URL.createObjectURL(e);e=document.createElement("script");e.src=t,e.onload=()=>URL.revokeObjectURL(t),(document.head||document.documentElement).appendChild(e)},args:[e.content],world:"MAIN"})}}};async function updateBadgeAndInjectScripts(e){console.log("[Zedmonkey] updateBadgeAndInjectScripts called for tabId: "+e);let t=await chrome.tabs.get(e);if(t&&t.url){if([/^chrome:\/\//,/^chrome-extension:\/\//,/^moz-extension:\/\//,/^about:/,/^edge:/,/^opera:/,/^extension:/,/^file:\/\/.*\/AppData\/Local\//,/^https:\/\/chrome\.google\.com\/webstore/,/^https:\/\/addons\.mozilla\.org/,/^https:\/\/microsoftedge\.microsoft\.com\/addons/,/^chrome-search:\/\//,/^devtools:\/\//,/^view-source:/].some(e=>e.test(t.url)))return console.log(`[Zedmonkey] Tab URL ${t.url} is excluded. Clearing badge.`),chrome.action.setBadgeText({tabId:e,text:""});var r,o=(await getScripts()).filter(e=>e.enabled&&isScriptMatchingUrl(e,t.url));if(!1!==(await chrome.storage.sync.get("injectionEnabled")).injectionEnabled){console.log(`[Zedmonkey] Injection is enabled. Attempting to inject ${o.length} scripts.`);for(var n of o)for(r of await chrome.webNavigation.getAllFrames({tabId:e}))if(r.errorOccurred||r.url.startsWith("about:blank"))console.warn(`[Zedmonkey] Skipping injection for frame: ${r.url} (error occurred or about:blank).`);else{var a=determineInjectionMethod({hasStrictCSP:!1}),s=[];"PAGE"===a?(s.push(injectionMethods.PAGE),s.push(injectionMethods.CONTENT),s.push(injectionMethods.XHR_BLOB)):"CONTENT"===a?(s.push(injectionMethods.CONTENT),s.push(injectionMethods.PAGE),s.push(injectionMethods.XHR_BLOB)):"XHR_BLOB"===a&&(s.push(injectionMethods.XHR_BLOB),s.push(injectionMethods.PAGE),s.push(injectionMethods.CONTENT));try{await injectWithRecovery(n,s,e,r.frameId)}catch(e){console.error(`[Zedmonkey] Failed to inject script ${n.id} into frame ${r.frameId}:`,e)}}}else console.log("[Zedmonkey] Injection is disabled.");o=o.length;chrome.action.setBadgeText({tabId:e,text:0<o?String(o):""}),chrome.action.setBadgeBackgroundColor({tabId:e,color:"#3498db"})}else console.log(`[Zedmonkey] No tab or URL found for tabId: ${e}.`)}chrome.tabs.onActivated.addListener(e=>{console.log("onActivated: Tab activated, updating badge and injecting scripts for tab ID:",e.tabId),updateBadgeAndInjectScripts(e.tabId)}),chrome.tabs.onUpdated.addListener(async(t,r,o)=>{if(console.log(`onUpdated: Tab ${t} updated. Status: ${r.status}, URL: `+o.url),!1!==(await chrome.storage.sync.get("injectionEnabled")).injectionEnabled){if([/^chrome:\/\//,/^chrome-extension:\/\//,/^moz-extension:\/\//,/^about:/,/^edge:/,/^opera:/,/^extension:/,/^file:\/\/.*\/AppData\/Local\//,/^https:\/\/chrome\.google\.com\/webstore/,/^https:\/\/addons\.mozilla\.org/,/^https:\/\/microsoftedge\.microsoft\.com\/addons/,/^chrome-search:\/\//,/^devtools:\/\//,/^view-source:/].some(e=>e.test(o.url)))return console.log(`[Zedmonkey] Tab URL ${o.url} is excluded. Clearing badge.`),chrome.action.setBadgeText({tabId:t,text:""});var e=(await getScripts()).filter(e=>e.enabled&&isScriptMatchingUrl(e,o.url));if(0===e.length)console.log(`[Zedmonkey] No matched scripts for tab ${t}. Clearing badge.`),chrome.action.setBadgeText({tabId:t,text:""});else{console.log(`[Zedmonkey] Found ${e.length} matched scripts for tab ${t}.`);for(var n of e){var a,s=n.metadata.run_at||"document_idle";let e=!1;if("document_start"===s&&"loading"===r.status)e=!0;else if("document_end"===s&&"complete"===r.status)e=!0;else if("document_idle"===s&&"complete"===r.status){setTimeout(()=>{updateBadgeAndInjectScripts(t)},500);continue}if(e)for(a of await chrome.webNavigation.getAllFrames({tabId:t}))if(a.errorOccurred||a.url.startsWith("about:blank"))console.warn(`[Zedmonkey] Skipping injection for frame: ${a.url} (error occurred or about:blank).`);else{var c=determineInjectionMethod({hasStrictCSP:!1}),i=[];"PAGE"===c?(i.push(injectionMethods.PAGE),i.push(injectionMethods.CONTENT),i.push(injectionMethods.XHR_BLOB)):"CONTENT"===c?(i.push(injectionMethods.CONTENT),i.push(injectionMethods.PAGE),i.push(injectionMethods.XHR_BLOB)):"XHR_BLOB"===c&&(i.push(injectionMethods.XHR_BLOB),i.push(injectionMethods.PAGE),i.push(injectionMethods.CONTENT));try{await injectWithRecovery(n,i,t,a.frameId)}catch(e){console.error(`[Zedmonkey] Failed to inject script ${n.id} into frame ${a.frameId}:`,e)}}}e=e.filter(e=>e.enabled&&isScriptMatchingUrl(e,o.url)).length;chrome.action.setBadgeText({tabId:t,text:0<e?String(e):""}),chrome.action.setBadgeBackgroundColor({tabId:t,color:"#3498db"})}}else console.log(`[Zedmonkey] Injection is disabled. Skipping script injection for tab ${t}.`),chrome.action.setBadgeText({tabId:t,text:""})}),chrome.runtime.onMessage.addListener((r,t,o)=>{console.log("onMessage: Received message:",r.action,r);try{switch(r.action){case"getScripts":return getScripts().then(e=>{e={scripts:e};console.log("onMessage: Sending response for getScripts:",e),o(e)}).catch(e=>{e={error:e.message};console.error("onMessage: Sending error response for getScripts:",e),o(e)}),!0;case"getMatchedScripts":return getScripts().then(e=>{e=e.filter(e=>isScriptMatchingUrl(e,r.url));o({scripts:e})}).catch(e=>o({error:e.message})),!0;case"getScriptContent":return getScripts().then(e=>{e=e.find(e=>e.id===r.scriptId);o(e?{content:e.content}:{error:"Script not found"})}).catch(e=>o({error:e.message})),!0;case"addScript":var e=parseUserscriptMetadata(r.scriptContent);return saveScript({content:r.scriptContent,metadata:e}).then(e=>o({success:!0,scriptId:e.id,name:e.metadata.name})).catch(e=>o({success:!1,error:e.message})),!0;case"updateScriptContent":return getScripts().then(e=>{e=e.find(e=>e.id===r.scriptId);if(e){e.content=r.scriptContent;try{var t=parseZedataBlock(r.scriptContent)||parseUserscriptMetadata(r.scriptContent);t&&(e.metadata=t)}catch(e){console.warn("updateScriptContent: Could not update metadata:",e)}return saveScript(e)}throw new Error("Script not found")}).then(e=>o({success:!0,scriptId:e.id,name:e.metadata.name})).catch(e=>o({success:!1,error:e.message})),!0;case"removeScript":return removeScript(r.scriptId).then(()=>o({success:!0})).catch(e=>o({success:!1,error:e.message})),!0;case"toggleScriptEnabled":case"toggleScript":return getScripts().then(e=>{e=e.find(e=>e.id===r.scriptId);if(e)return e.enabled=r.enabled,saveScript(e);throw new Error("Script not found")}).then(()=>{o({success:!0}),chrome.tabs.query({active:!0,currentWindow:!0},e=>{e&&e[0]&&updateBadgeAndInjectScripts(e[0].id)})}).catch(e=>o({success:!1,error:e.message})),!0;case"setInjectionState":return chrome.storage.sync.set({injectionEnabled:r.enabled},()=>{o({success:!0}),chrome.tabs.query({},e=>{e.forEach(e=>{updateBadgeAndInjectScripts(e.id)})})}),!0;case"openScriptInEditor":try{chrome.storage.local.set({tempScriptContent:r.scriptContent},()=>{chrome.tabs.create({url:chrome.runtime.getURL("editor/editor.html?loadTemp=true")}),o({success:!0})})}catch(e){console.error("openScriptInEditor: Error opening editor:",e),o({success:!1,error:e.message})}return!0;case"getScriptsForCurrentPage":return getScripts().then(e=>{e=e.filter(e=>e.enabled&&isScriptMatchingUrl(e,r.url));e.forEach(e=>{chrome.tabs.sendMessage(t.tab.id,{action:"injectScript",scriptContent:e.content})}),o({count:e.length})}).catch(e=>o({error:e.message})),!0;case"proxyRequest":return console.log("onMessage: Received proxyRequest for URL:",r.url),fetch(r.url,{method:r.method||"GET",headers:r.headers||{},body:r.body||null}).then(e=>{if(e.ok)return e.text();throw new Error("HTTP error! status: "+e.status)}).then(e=>{o({success:!0,content:e})}).catch(e=>{console.error("onMessage: Error proxying request:",e),o({success:!1,error:e.message})}),!0;case"GM_getValue":return chrome.storage.local.get(`gm_${r.scriptId}_`+r.name,e=>{e=e[`gm_${r.scriptId}_`+r.name];o({value:void 0!==e?e:r.defaultValue})}),!0;case"GM_setValue":return chrome.storage.local.set({[`gm_${r.scriptId}_`+r.name]:r.value},()=>{o({success:!0})}),!0;case"GM_deleteValue":return chrome.storage.local.remove(`gm_${r.scriptId}_`+r.name,()=>{o({success:!0})}),!0;case"GM_listValues":return chrome.storage.local.get(null,e=>{let t=`gm_${r.scriptId}_`;e=Object.keys(e).filter(e=>e.startsWith(t)).map(e=>e.substring(t.length));o({values:e})}),!0;case"GM_openInTab":return chrome.tabs.create({url:r.url,active:r.active,index:void 0},e=>{o({tabId:e.id})}),!0;case"GM_registerMenuCommand":return chrome.storage.local.get("gmMenuCommands",e=>{e=e.gmMenuCommands||{};e[r.scriptId]||(e[r.scriptId]={}),e[r.scriptId][r.menuId]={name:r.name,options:r.options},chrome.storage.local.set({gmMenuCommands:e},()=>{o({success:!0})})}),!0;case"GM_unregisterMenuCommand":return chrome.storage.local.get("gmMenuCommands",e=>{e=e.gmMenuCommands||{};e[r.scriptId]&&(delete e[r.scriptId][r.menuId],chrome.storage.local.set({gmMenuCommands:e},()=>{o({success:!0})}))}),!0;case"GM_notification":return chrome.notifications.create({type:"basic",iconUrl:r.image||chrome.runtime.getURL("icon48.png"),title:r.title||"Zedmonkey",message:r.text},e=>{o({notificationId:e})}),!0;case"GM_xmlhttpRequest":var n=r.details;return fetch(n.url,{method:n.method||"GET",headers:n.headers||{},body:n.data||null}).then(e=>{let r={readyState:4,responseText:"",responseURL:e.url,status:e.status,statusText:e.statusText,responseHeaders:{}};return e.headers.forEach((e,t)=>{r.responseHeaders[t]=e}),e.text().then(e=>(r.responseText=e,r))}).then(e=>{o(e)}).catch(e=>{o({error:e.message})}),!0;case"GM_download":return chrome.downloads.download({url:r.url,filename:r.name,headers:r.headers?Object.entries(r.headers).map(([e,t])=>({name:e,value:t})):[]},e=>{chrome.runtime.lastError?o({error:chrome.runtime.lastError.message}):o({downloadId:e})}),!0;case"createTestScript":try{var a=createTestScript(),s=parseUserscriptMetadata(a);let t=validateMetadataBlock(a);t.valid||console.warn("Test script metadata validation warnings:",t.errors),saveScript({content:a,metadata:s,enabled:!0}).then(e=>{console.log("Test script created successfully:",e.metadata.name),o({success:!0,scriptId:e.id,name:e.metadata.name,validation:t}),chrome.tabs.query({},e=>{e.forEach(e=>{updateBadgeAndInjectScripts(e.id)})})}).catch(e=>{o({success:!1,error:e.message})})}catch(e){o({success:!1,error:"Failed to create test script: "+e.message})}return!0;case"validateMetadata":try{var c=validateMetadataBlock(r.scriptContent),i=parseUserscriptMetadata(r.scriptContent),d=!!i&&requiresPrivileges(i),l=!(!i||!i.version)&&validateVersion(i.version);o({success:!0,validation:c,metadata:i,requiresPrivileges:d,validVersion:l})}catch(e){o({success:!1,error:e.message})}return!0;default:return console.warn("onMessage: Unknown action received:",r.action),o({error:"Unknown action"}),!1}}catch(e){return console.error("onMessage: Error handling message:",e),o({error:e.message}),!1}}),chrome.runtime.onInstalled.addListener(()=>{console.log("onInstalled: Extension installed or updated."),chrome.contextMenus.create({id:"reload-without-scripts",title:"Reload page without scripts",contexts:["action"]}),chrome.contextMenus.create({id:"extension-options",title:"Extension options",contexts:["action"]})}),chrome.contextMenus.onClicked.addListener((e,r)=>{console.log("onClicked: Context menu item clicked:",e.menuItemId),"reload-without-scripts"===e.menuItemId?chrome.storage.sync.get("injectionEnabled",e=>{let t=!1!==e.injectionEnabled;chrome.storage.sync.set({injectionEnabled:!1},()=>{chrome.tabs.reload(r.id,{bypassCache:!0},()=>{setTimeout(()=>{chrome.storage.sync.set({injectionEnabled:t})},500)})})}):"extension-options"===e.menuItemId&&chrome.runtime.openOptionsPage()}),chrome.runtime.onInstalled.addListener(e=>{console.log("onInstalled: Details:",e.reason),"install"===e.reason?chrome.storage.local.set({firstInstall:!0},()=>{console.log("Primera instalación detectada, mostrando onboarding"),chrome.tabs.create({url:chrome.runtime.getURL("onboarding/welcome.html")})}):"update"===e.reason&&(console.log("Actualización detectada, mostrando página de novedades"),chrome.tabs.create({url:chrome.runtime.getURL("onboarding/update.html")}))}),chrome.runtime.setUninstallURL("https://zedmonkey.vercel.app/feedback.html");
let urlParams = new URLSearchParams(window.location.search),
    scriptId = urlParams.get("id"),
    scriptName = urlParams.get("name") || "New Script",
    domElements = {};

function getElement(e) {
    return domElements[e] || (domElements[e] = document.getElementById(e)), domElements[e]
}

function initializeEditor() {
    getElement("script-title").textContent = scriptName;
    var e = document.getElementById("script-content"),
        t = (document.getElementById("line-numbers"), document.getElementById("save-script").addEventListener("click", saveScript), document.getElementById("cancel-edit").addEventListener("click", cancelEdit), document.getElementById("download-script"));
    t && t.addEventListener("click", downloadScript), (t = document.getElementById("refresh-script")) && t.addEventListener("click", refreshScript), (t = document.getElementById("delete-script")) && t.addEventListener("click", deleteScript), (t = document.getElementById("log-button")) && t.addEventListener("click", logScriptContent), e.addEventListener("input", () => {
        updateLineNumbers(), highlightSyntax(), updateCursorPosition()
    }), e.addEventListener("scroll", () => {
        syncScroll(), highlightSyntax()
    }), e.addEventListener("keydown", handleTabKey), e.addEventListener("click", updateCursorPosition), e.addEventListener("keyup", updateCursorPosition), document.getElementById("search-scripts").addEventListener("input", filterScripts), loadAllScripts(), scriptId ? loadScriptContent(scriptId) : (e.value = getScriptTemplate(), updateLineNumbers()), urlParams.get("loadTemp") && chrome.storage.local.get("tempScriptContent", function(e) {
        e.tempScriptContent && (document.getElementById("script-content").value = e.tempScriptContent, updateLineNumbers(), chrome.storage.local.remove("tempScriptContent"))
    }), editor = CodeMirror(document.getElementById("editor-wrapper"), {
        mode: {
            name: "javascript",
            json: !0,
            typescript: !0
        },
        theme: "dracula",
        lineNumbers: !0,
        lineWrapping: !1,
        indentUnit: 2,
        tabSize: 2,
        indentWithTabs: !1,
        autoCloseBrackets: !0,
        matchBrackets: !0,
        foldGutter: !0,
        gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
        extraKeys: {
            "Ctrl-Space": "autocomplete",
            "Ctrl-Q": function(e) {
                e.foldCode(e.getCursor())
            },
            Tab: function(e) {
                e.somethingSelected() ? e.indentSelection("add") : e.replaceSelection("  ", "end")
            }
        }
    })
}

function getScriptTemplate() {
    return `[script]
name = "Hello World Script"
namespace = "zedmonkey"
version = "1.0"
description = "Muestra una alerta de 'Hello World' al cargar la página"
author = "Zedmonkey User"
match = "*://*/*"
grant = "none"

(function() {
    'use strict';
    
    // Crear un elemento de notificación estilizado
    const notification = document.createElement('div');
    notification.style.cssText = \`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 15px 20px;
        border-radius: 4px;
        font-family: Arial, sans-serif;
        z-index: 9999;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        transition: opacity 0.5s ease-in-out;
    \`;
    notification.textContent = '¡Hello World desde Zedmonkey!';
    
    // Añadir la notificación al documento
    document.body.appendChild(notification);
    
    // Desvanecer y eliminar después de 3 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 3000);
    
    // También mostrar en la consola
    console.log('Hello World desde Zedmonkey!');
})();
`
}

function loadAllScripts() {
    chrome.runtime.sendMessage({
        action: "getScripts"
    }, e => {
        e && e.scripts ? renderScriptsList(e.scripts) : showStatusMessage("Error loading scripts", !0)
    })
}

function renderScriptsList(e) {
    let a = document.getElementById("scripts-list");
    a.innerHTML = "", 0 === e.length ? a.innerHTML = '<div class="empty-state">No scripts installed</div>' : e.forEach(e => {
        var t = document.createElement("div"),
            n = (t.className = "script-item", e.id === scriptId && t.classList.add("active"), getScriptType(e)),
            s = (t.style.borderLeftColor = "css" === n ? "#4caf50" : "bookmarklet" === n ? "#2196f3" : "#ffcc00", document.createElement("div")),
            o = (s.className = "script-info", document.createElement("div")),
            i = (o.style.display = "flex", o.style.alignItems = "center", document.createElement("span"));
        i.className = "script-badge " + n, i.textContent = n.toUpperCase(), o.appendChild(i), (n = document.createElement("div")).className = "script-name", n.style.display = "inline", n.textContent = e.metadata?.name || "Unnamed Script", o.appendChild(n), s.appendChild(o), (i = document.createElement("div")).className = "script-meta", i.textContent = `v${e.metadata?.version||"1.0"} • ` + (e.metadata?.match?.[0] || "*"), s.appendChild(i), e.metadata?.description && ((n = document.createElement("div")).className = "script-description", n.textContent = e.metadata.description, s.appendChild(n)), (o = document.createElement("label")).className = "toggle-switch", (i = document.createElement("input")).type = "checkbox", i.checked = !1 !== e.enabled, i.dataset.scriptId = e.id, i.addEventListener("change", toggleScriptEnabled), (n = document.createElement("span")).className = "slider", o.appendChild(i), o.appendChild(n), t.appendChild(s), t.appendChild(o), s.addEventListener("click", () => {
            window.location.href = `editor.html?id=${e.id}&name=` + encodeURIComponent(e.metadata?.name || "Script")
        }), a.appendChild(t)
    })
}

function getScriptType(e) {
    if (e.content) {
        if (e.metadata?.type) return e.metadata.type.toLowerCase();
        if (!e.content.includes("@resource") && !e.content.includes("@require")) {
            if (e.content.trim().startsWith("javascript:")) return "bookmarklet";
            e.content.includes("@-moz-document") || e.content.includes("@namespace") || e.content.includes("@media")
        }
    }
    return "js"
}

function toggleScriptEnabled(t) {
    let e = t.target.dataset.scriptId,
        n = t.target.checked;
    chrome.runtime.sendMessage({
        action: "toggleScriptEnabled",
        scriptId: e,
        enabled: n
    }, e => {
        e && e.success ? showStatusMessage("Script " + (n ? "enabled" : "disabled")) : (showStatusMessage("Error updating script state", !0), t.target.checked = !n)
    })
}

function filterScripts(e) {
    let s = e.target.value.toLowerCase();
    document.querySelectorAll(".script-item").forEach(e => {
        var t = e.querySelector(".script-name").textContent.toLowerCase(),
            n = e.querySelector(".script-meta").textContent.toLowerCase();
        t.includes(s) || n.includes(s) ? e.style.display = "flex" : e.style.display = "none"
    })
}

function loadScriptContent(e) {
    chrome.runtime.sendMessage({
        action: "getScriptContent",
        scriptId: e
    }, e => {
        e && e.content ? (document.getElementById("script-content").value = e.content, updateLineNumbers(), showStatusMessage("Script loaded successfully")) : showStatusMessage("Error loading script", !0)
    })
}

function saveScript() {
    var e, t = document.getElementById("script-content").value.trim();
    t ? (e = scriptId ? "updateScriptContent" : "addScript", chrome.runtime.sendMessage({
        action: e,
        scriptContent: t,
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script saved successfully"), !scriptId && e.scriptId && (window.location.href = `editor.html?id=${e.scriptId}&name=` + encodeURIComponent(e.name || "Script"))) : showStatusMessage("Error saving script: " + (e.error || "Unknown error"), !0)
    })) : showStatusMessage("Please enter script content", !0)
}

function cancelEdit() {
    window.close()
}

function logScriptContent() {
    console.log(document.getElementById("script-content").value), showStatusMessage("Script content logged to console")
}

function updateLineNumbers() {
    var e = document.getElementById("script-content"),
        t = document.getElementById("line-numbers"),
        n = e.value.split("\n").length;
    t.innerHTML = "";
    for (let e = 1; e <= Math.max(10, n); e++) {
        var s = document.createElement("div");
        s.textContent = e, t.appendChild(s)
    }
}

function syncScroll() {
    var e = document.getElementById("script-content");
    document.getElementById("line-numbers").scrollTop = e.scrollTop
}

function handleTabKey(e) {
    var t, n;
    "Tab" === e.key && (e.preventDefault(), t = (e = e.target).selectionStart, n = e.selectionEnd, e.value = e.value.substring(0, t) + "  " + e.value.substring(n), e.selectionStart = e.selectionEnd = t + 2)
}

function showStatusMessage(e, t = !1) {
    let n = document.getElementById("status-message");
    n.textContent = e, n.style.color = t ? "#f44336" : "#4caf50", setTimeout(() => {
        n.textContent = ""
    }, 3e3)
}

function downloadScript() {
    var e = document.getElementById("script-content").value,
        t = document.getElementById("script-title").textContent.replace(/[^a-z0-9]/gi, "_").toLowerCase() + ".js",
        e = new Blob([e], {
            type: "text/javascript"
        });
    let n = URL.createObjectURL(e),
        s = document.createElement("a");
    s.href = n, s.download = t, document.body.appendChild(s), s.click(), setTimeout(() => {
        document.body.removeChild(s), URL.revokeObjectURL(n)
    }, 0), showStatusMessage("Script downloaded")
}

function refreshScript() {
    scriptId ? (loadScriptContent(scriptId), showStatusMessage("Script refreshed")) : showStatusMessage("Cannot refresh new script", !0)
}

function deleteScript() {
    scriptId ? confirm("Are you sure you want to delete this script?") && chrome.runtime.sendMessage({
        action: "removeScript",
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script deleted"), setTimeout(() => {
            window.location.href = "editor.html"
        }, 1e3)) : showStatusMessage("Error deleting script", !0)
    }) : showStatusMessage("Cannot delete new script", !0)
}

function loadTempContentIfNeeded() {
    "true" === new URLSearchParams(window.location.search).get("loadTemp") && chrome.storage.local.get("tempScriptContent", e => {
        e.tempScriptContent ? (editor.setValue(e.tempScriptContent), chrome.storage.local.remove("tempScriptContent")) : console.error("No temporary script content found")
    })
}

function highlightSyntax() {
    var e = document.getElementById("script-content"),
        t = document.getElementById("highlight-layer"),
        n = applyHighlighting(e.value);
    t.innerHTML = n, t.scrollTop = e.scrollTop, t.scrollLeft = e.scrollLeft
}

function applyHighlighting(e) {
    return e ? e.replace(/(\[script\])/g, '<span class="token zedata-section">$1</span>').replace(/^(\w+)\s*=\s*(".*?")/gm, '<span class="token zedata-key">$1</span> <span class="token operator">=</span> <span class="token zedata-value">$2</span>').replace(/(\/\/.*$)/gm, '<span class="token comment">$1</span>').replace(/(\/\*[\s\S]*?\*\/)/g, '<span class="token comment">$1</span>').replace(/("(?:\\.|[^"\\])*")|('(?:\\.|[^'\\])*')|(`(?:\\.|[^`\\])*`)/g, '<span class="token string">$1$2$3</span>').replace(/\b(\d+(?:\.\d+)?)\b/g, '<span class="token number">$1</span>').replace(/\b(const|let|var|function|return|if|else|for|while|do|switch|case|break|continue|new|try|catch|finally|throw|class|extends|import|export|default|from|async|await|this|super|yield|typeof|instanceof|in|of|delete|void|null|undefined|true|false)\b/g, '<span class="token keyword">$1</span>').replace(/\b([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g, '<span class="token function">$1</span>(').replace(/([{}[\]()])/g, '<span class="token bracket">$1</span>').replace(/(\+|\-|\*|\/|%|=|\+=|\-=|\*=|\/=|%=|==|===|!=|!==|>|<|>=|<=|&&|\|\||!|\?|:|&|\||\^|~|<<|>>|>>>)/g, '<span class="token operator">$1</span>').replace(/([;,.])/g, '<span class="token punctuation">$1</span>') : ""
}

function updateCursorPosition() {
    let e = document.getElementById("script-content"),
        t = document.getElementById("cursor-position"),
        n = e.value,
        s = e.selectionStart,
        o = 1,
        i = 1;
    for (let e = 0; e < s; e++) "\n" === n[e] ? (o++, i = 1) : i++;
    t.textContent = `Line: ${o}, Column: ` + i, highlightCurrentLine(o)
}

function highlightCurrentLine(e) {
    var t = document.getElementById("highlight-layer"),
        n = t.innerHTML.split("\n");
    for (let e = 0; e < n.length; e++) n[e] = n[e].replace(/<div class="current-line">(.*?)<\/div>/g, "$1");
    0 < e && e <= n.length && (n[e - 1] = `<div class="current-line">${n[e-1]}</div>`), t.innerHTML = n.join("\n")
}

function initializeEditor() {
    scriptContent.addEventListener("input", () => {
        updateLineNumbers(), highlightSyntax(), updateCursorPosition()
    }), scriptContent.addEventListener("scroll", () => {
        syncScroll(), highlightSyntax()
    }), scriptContent.addEventListener("keydown", handleTabKey), scriptContent.addEventListener("click", updateCursorPosition), scriptContent.addEventListener("keyup", updateCursorPosition), document.getElementById("search-scripts").addEventListener("input", filterScripts), loadAllScripts(), scriptId ? loadScriptContent(scriptId) : (scriptContent.value = getScriptTemplate(), updateLineNumbers()), urlParams.get("loadTemp") && chrome.storage.local.get("tempScriptContent", function(e) {
        e.tempScriptContent && (document.getElementById("script-content").value = e.tempScriptContent, updateLineNumbers(), chrome.storage.local.remove("tempScriptContent"))
    })
}

function getScriptTemplate() {
    return `[script]
name = "Hello World Script"
namespace = "zedmonkey"
version = "1.0"
description = "Muestra una alerta de 'Hello World' al cargar la página"
author = "Zedmonkey User"
match = "*://*/*"
grant = "none"

(function() {
    'use strict';
    
    // Crear un elemento de notificación estilizado
    const notification = document.createElement('div');
    notification.style.cssText = \`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 15px 20px;
        border-radius: 4px;
        font-family: Arial, sans-serif;
        z-index: 9999;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        transition: opacity 0.5s ease-in-out;
    \`;
    notification.textContent = '¡Hello World desde Zedmonkey!';
    
    // Añadir la notificación al documento
    document.body.appendChild(notification);
    
    // Desvanecer y eliminar después de 3 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 3000);
    
    // También mostrar en la consola
    console.log('Hello World desde Zedmonkey!');
})();
`
}

function loadAllScripts() {
    chrome.runtime.sendMessage({
        action: "getScripts"
    }, e => {
        e && e.scripts ? renderScriptsList(e.scripts) : showStatusMessage("Error loading scripts", !0)
    })
}

function renderScriptsList(e) {
    let a = document.getElementById("scripts-list");
    a.innerHTML = "", 0 === e.length ? a.innerHTML = '<div class="empty-state">No scripts installed</div>' : e.forEach(e => {
        var t = document.createElement("div"),
            n = (t.className = "script-item", e.id === scriptId && t.classList.add("active"), getScriptType(e)),
            s = (t.style.borderLeftColor = "css" === n ? "#4caf50" : "bookmarklet" === n ? "#2196f3" : "#ffcc00", document.createElement("div")),
            o = (s.className = "script-info", document.createElement("div")),
            i = (o.style.display = "flex", o.style.alignItems = "center", document.createElement("span"));
        i.className = "script-badge " + n, i.textContent = n.toUpperCase(), o.appendChild(i), (n = document.createElement("div")).className = "script-name", n.style.display = "inline", n.textContent = e.metadata?.name || "Unnamed Script", o.appendChild(n), s.appendChild(o), (i = document.createElement("div")).className = "script-meta", i.textContent = `v${e.metadata?.version||"1.0"} • ` + (e.metadata?.match?.[0] || "*"), s.appendChild(i), e.metadata?.description && ((n = document.createElement("div")).className = "script-description", n.textContent = e.metadata.description, s.appendChild(n)), (o = document.createElement("label")).className = "toggle-switch", (i = document.createElement("input")).type = "checkbox", i.checked = !1 !== e.enabled, i.dataset.scriptId = e.id, i.addEventListener("change", toggleScriptEnabled), (n = document.createElement("span")).className = "slider", o.appendChild(i), o.appendChild(n), t.appendChild(s), t.appendChild(o), s.addEventListener("click", () => {
            window.location.href = `editor.html?id=${e.id}&name=` + encodeURIComponent(e.metadata?.name || "Script")
        }), a.appendChild(t)
    })
}

function getScriptType(e) {
    if (e.content) {
        if (e.metadata?.type) return e.metadata.type.toLowerCase();
        if (!e.content.includes("@resource") && !e.content.includes("@require")) {
            if (e.content.trim().startsWith("javascript:")) return "bookmarklet";
            e.content.includes("@-moz-document") || e.content.includes("@namespace") || e.content.includes("@media")
        }
    }
    return "js"
}

function toggleScriptEnabled(t) {
    let e = t.target.dataset.scriptId,
        n = t.target.checked;
    chrome.runtime.sendMessage({
        action: "toggleScriptEnabled",
        scriptId: e,
        enabled: n
    }, e => {
        e && e.success ? showStatusMessage("Script " + (n ? "enabled" : "disabled")) : (showStatusMessage("Error updating script state", !0), t.target.checked = !n)
    })
}

function filterScripts(e) {
    let s = e.target.value.toLowerCase();
    document.querySelectorAll(".script-item").forEach(e => {
        var t = e.querySelector(".script-name").textContent.toLowerCase(),
            n = e.querySelector(".script-meta").textContent.toLowerCase();
        t.includes(s) || n.includes(s) ? e.style.display = "flex" : e.style.display = "none"
    })
}

function loadScriptContent(e) {
    chrome.runtime.sendMessage({
        action: "getScriptContent",
        scriptId: e
    }, e => {
        e && e.content ? (document.getElementById("script-content").value = e.content, updateLineNumbers(), showStatusMessage("Script loaded successfully")) : showStatusMessage("Error loading script", !0)
    })
}

function saveScript() {
    var e, t = document.getElementById("script-content").value.trim();
    t ? (e = scriptId ? "updateScriptContent" : "addScript", chrome.runtime.sendMessage({
        action: e,
        scriptContent: t,
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script saved successfully"), !scriptId && e.scriptId && (window.location.href = `editor.html?id=${e.scriptId}&name=` + encodeURIComponent(e.name || "Script"))) : showStatusMessage("Error saving script: " + (e.error || "Unknown error"), !0)
    })) : showStatusMessage("Please enter script content", !0)
}

function cancelEdit() {
    window.close()
}

function logScriptContent() {
    console.log(document.getElementById("script-content").value), showStatusMessage("Script content logged to console")
}

function updateLineNumbers() {
    var e = document.getElementById("script-content"),
        t = document.getElementById("line-numbers"),
        n = e.value.split("\n").length;
    t.innerHTML = "";
    for (let e = 1; e <= Math.max(10, n); e++) {
        var s = document.createElement("div");
        s.textContent = e, t.appendChild(s)
    }
}

function syncScroll() {
    var e = document.getElementById("script-content");
    document.getElementById("line-numbers").scrollTop = e.scrollTop
}

function handleTabKey(e) {
    var t, n;
    "Tab" === e.key && (e.preventDefault(), t = (e = e.target).selectionStart, n = e.selectionEnd, e.value = e.value.substring(0, t) + "  " + e.value.substring(n), e.selectionStart = e.selectionEnd = t + 2)
}

function showStatusMessage(e, t = !1) {
    let n = document.getElementById("status-message");
    n.textContent = e, n.style.color = t ? "#f44336" : "#4caf50", setTimeout(() => {
        n.textContent = ""
    }, 3e3)
}

function downloadScript() {
    var e = document.getElementById("script-content").value,
        t = document.getElementById("script-title").textContent.replace(/[^a-z0-9]/gi, "_").toLowerCase() + ".js",
        e = new Blob([e], {
            type: "text/javascript"
        });
    let n = URL.createObjectURL(e),
        s = document.createElement("a");
    s.href = n, s.download = t, document.body.appendChild(s), s.click(), setTimeout(() => {
        document.body.removeChild(s), URL.revokeObjectURL(n)
    }, 0), showStatusMessage("Script downloaded")
}

function refreshScript() {
    scriptId ? (loadScriptContent(scriptId), showStatusMessage("Script refreshed")) : showStatusMessage("Cannot refresh new script", !0)
}

function deleteScript() {
    scriptId ? confirm("Are you sure you want to delete this script?") && chrome.runtime.sendMessage({
        action: "removeScript",
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script deleted"), setTimeout(() => {
            window.location.href = "editor.html"
        }, 1e3)) : showStatusMessage("Error deleting script", !0)
    }) : showStatusMessage("Cannot delete new script", !0)
}

function loadTempContentIfNeeded() {
    "true" === new URLSearchParams(window.location.search).get("loadTemp") && chrome.storage.local.get("tempScriptContent", e => {
        e.tempScriptContent ? (editor.setValue(e.tempScriptContent), chrome.storage.local.remove("tempScriptContent")) : console.error("No temporary script content found")
    })
}

function highlightSyntax() {
    var e = document.getElementById("script-content"),
        t = document.getElementById("highlight-layer"),
        n = applyHighlighting(e.value);
    t.innerHTML = n, t.scrollTop = e.scrollTop, t.scrollLeft = e.scrollLeft
}

function applyHighlighting(e) {
    return e ? e.replace(/(\[script\])/g, '<span class="token zedata-section">$1</span>').replace(/^(\w+)\s*=\s*(".*?")/gm, '<span class="token zedata-key">$1</span> <span class="token operator">=</span> <span class="token zedata-value">$2</span>').replace(/(\/\/.*$)/gm, '<span class="token comment">$1</span>').replace(/(\/\*[\s\S]*?\*\/)/g, '<span class="token comment">$1</span>').replace(/("(?:\\.|[^"\\])*")|('(?:\\.|[^'\\])*')|(`(?:\\.|[^`\\])*`)/g, '<span class="token string">$1$2$3</span>').replace(/\b(\d+(?:\.\d+)?)\b/g, '<span class="token number">$1</span>').replace(/\b(const|let|var|function|return|if|else|for|while|do|switch|case|break|continue|new|try|catch|finally|throw|class|extends|import|export|default|from|async|await|this|super|yield|typeof|instanceof|in|of|delete|void|null|undefined|true|false)\b/g, '<span class="token keyword">$1</span>').replace(/\b([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g, '<span class="token function">$1</span>(').replace(/([{}[\]()])/g, '<span class="token bracket">$1</span>').replace(/(\+|\-|\*|\/|%|=|\+=|\-=|\*=|\/=|%=|==|===|!=|!==|>|<|>=|<=|&&|\|\||!|\?|:|&|\||\^|~|<<|>>|>>>)/g, '<span class="token operator">$1</span>').replace(/([;,.])/g, '<span class="token punctuation">$1</span>') : ""
}

function updateCursorPosition() {
    let e = document.getElementById("script-content"),
        t = document.getElementById("cursor-position"),
        n = e.value,
        s = e.selectionStart,
        o = 1,
        i = 1;
    for (let e = 0; e < s; e++) "\n" === n[e] ? (o++, i = 1) : i++;
    t.textContent = `Line: ${o}, Column: ` + i, highlightCurrentLine(o)
}

function highlightCurrentLine(e) {
    var t = document.getElementById("highlight-layer"),
        n = t.innerHTML.split("\n");
    for (let e = 0; e < n.length; e++) n[e] = n[e].replace(/<div class="current-line">(.*?)<\/div>/g, "$1");
    0 < e && e <= n.length && (n[e - 1] = `<div class="current-line">${n[e-1]}</div>`), t.innerHTML = n.join("\n")
}

function initializeEditor() {
    scriptContent.addEventListener("input", () => {
        updateLineNumbers(), highlightSyntax(), updateCursorPosition()
    }), scriptContent.addEventListener("scroll", () => {
        syncScroll(), highlightSyntax()
    }), scriptContent.addEventListener("keydown", handleTabKey), scriptContent.addEventListener("click", updateCursorPosition), scriptContent.addEventListener("keyup", updateCursorPosition), document.getElementById("search-scripts").addEventListener("input", filterScripts), loadAllScripts(), scriptId ? loadScriptContent(scriptId) : (scriptContent.value = getScriptTemplate(), updateLineNumbers()), urlParams.get("loadTemp") && chrome.storage.local.get("tempScriptContent", function(e) {
        e.tempScriptContent && (document.getElementById("script-content").value = e.tempScriptContent, updateLineNumbers(), chrome.storage.local.remove("tempScriptContent"))
    })
}

function getScriptTemplate() {
    return `[script]
name = "Hello World Script"
namespace = "zedmonkey"
version = "1.0"
description = "Muestra una alerta de 'Hello World' al cargar la página"
author = "Zedmonkey User"
match = "*://*/*"
grant = "none"

(function() {
    'use strict';
    
    // Crear un elemento de notificación estilizado
    const notification = document.createElement('div');
    notification.style.cssText = \`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 15px 20px;
        border-radius: 4px;
        font-family: Arial, sans-serif;
        z-index: 9999;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        transition: opacity 0.5s ease-in-out;
    \`;
    notification.textContent = '¡Hello World desde Zedmonkey!';
    
    // Añadir la notificación al documento
    document.body.appendChild(notification);
    
    // Desvanecer y eliminar después de 3 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 3000);
    
    // También mostrar en la consola
    console.log('Hello World desde Zedmonkey!');
})();
`
}

function loadAllScripts() {
    chrome.runtime.sendMessage({
        action: "getScripts"
    }, e => {
        e && e.scripts ? renderScriptsList(e.scripts) : showStatusMessage("Error loading scripts", !0)
    })
}

function renderScriptsList(e) {
    let a = document.getElementById("scripts-list");
    a.innerHTML = "", 0 === e.length ? a.innerHTML = '<div class="empty-state">No scripts installed</div>' : e.forEach(e => {
        var t = document.createElement("div"),
            n = (t.className = "script-item", e.id === scriptId && t.classList.add("active"), getScriptType(e)),
            s = (t.style.borderLeftColor = "css" === n ? "#4caf50" : "bookmarklet" === n ? "#2196f3" : "#ffcc00", document.createElement("div")),
            o = (s.className = "script-info", document.createElement("div")),
            i = (o.style.display = "flex", o.style.alignItems = "center", document.createElement("span"));
        i.className = "script-badge " + n, i.textContent = n.toUpperCase(), o.appendChild(i), (n = document.createElement("div")).className = "script-name", n.style.display = "inline", n.textContent = e.metadata?.name || "Unnamed Script", o.appendChild(n), s.appendChild(o), (i = document.createElement("div")).className = "script-meta", i.textContent = `v${e.metadata?.version||"1.0"} • ` + (e.metadata?.match?.[0] || "*"), s.appendChild(i), e.metadata?.description && ((n = document.createElement("div")).className = "script-description", n.textContent = e.metadata.description, s.appendChild(n)), (o = document.createElement("label")).className = "toggle-switch", (i = document.createElement("input")).type = "checkbox", i.checked = !1 !== e.enabled, i.dataset.scriptId = e.id, i.addEventListener("change", toggleScriptEnabled), (n = document.createElement("span")).className = "slider", o.appendChild(i), o.appendChild(n), t.appendChild(s), t.appendChild(o), s.addEventListener("click", () => {
            window.location.href = `editor.html?id=${e.id}&name=` + encodeURIComponent(e.metadata?.name || "Script")
        }), a.appendChild(t)
    })
}

function getScriptType(e) {
    if (e.content) {
        if (e.metadata?.type) return e.metadata.type.toLowerCase();
        if (!e.content.includes("@resource") && !e.content.includes("@require")) {
            if (e.content.trim().startsWith("javascript:")) return "bookmarklet";
            e.content.includes("@-moz-document") || e.content.includes("@namespace") || e.content.includes("@media")
        }
    }
    return "js"
}

function toggleScriptEnabled(t) {
    let e = t.target.dataset.scriptId,
        n = t.target.checked;
    chrome.runtime.sendMessage({
        action: "toggleScriptEnabled",
        scriptId: e,
        enabled: n
    }, e => {
        e && e.success ? showStatusMessage("Script " + (n ? "enabled" : "disabled")) : (showStatusMessage("Error updating script state", !0), t.target.checked = !n)
    })
}

function filterScripts(e) {
    let s = e.target.value.toLowerCase();
    document.querySelectorAll(".script-item").forEach(e => {
        var t = e.querySelector(".script-name").textContent.toLowerCase(),
            n = e.querySelector(".script-meta").textContent.toLowerCase();
        t.includes(s) || n.includes(s) ? e.style.display = "flex" : e.style.display = "none"
    })
}

function loadScriptContent(e) {
    chrome.runtime.sendMessage({
        action: "getScriptContent",
        scriptId: e
    }, e => {
        e && e.content ? (document.getElementById("script-content").value = e.content, updateLineNumbers(), showStatusMessage("Script loaded successfully")) : showStatusMessage("Error loading script", !0)
    })
}

function saveScript() {
    var e, t = document.getElementById("script-content").value.trim();
    t ? (e = scriptId ? "updateScriptContent" : "addScript", chrome.runtime.sendMessage({
        action: e,
        scriptContent: t,
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script saved successfully"), !scriptId && e.scriptId && (window.location.href = `editor.html?id=${e.scriptId}&name=` + encodeURIComponent(e.name || "Script"))) : showStatusMessage("Error saving script: " + (e.error || "Unknown error"), !0)
    })) : showStatusMessage("Please enter script content", !0)
}

function cancelEdit() {
    window.close()
}

function logScriptContent() {
    console.log(document.getElementById("script-content").value), showStatusMessage("Script content logged to console")
}

function updateLineNumbers() {
    var e = document.getElementById("script-content"),
        t = document.getElementById("line-numbers"),
        n = e.value.split("\n").length;
    t.innerHTML = "";
    for (let e = 1; e <= Math.max(10, n); e++) {
        var s = document.createElement("div");
        s.textContent = e, t.appendChild(s)
    }
}

function syncScroll() {
    var e = document.getElementById("script-content");
    document.getElementById("line-numbers").scrollTop = e.scrollTop
}

function handleTabKey(e) {
    var t, n;
    "Tab" === e.key && (e.preventDefault(), t = (e = e.target).selectionStart, n = e.selectionEnd, e.value = e.value.substring(0, t) + "  " + e.value.substring(n), e.selectionStart = e.selectionEnd = t + 2)
}

function showStatusMessage(e, t = !1) {
    let n = document.getElementById("status-message");
    n.textContent = e, n.style.color = t ? "#f44336" : "#4caf50", setTimeout(() => {
        n.textContent = ""
    }, 3e3)
}

function downloadScript() {
    var e = document.getElementById("script-content").value,
        t = document.getElementById("script-title").textContent.replace(/[^a-z0-9]/gi, "_").toLowerCase() + ".js",
        e = new Blob([e], {
            type: "text/javascript"
        });
    let n = URL.createObjectURL(e),
        s = document.createElement("a");
    s.href = n, s.download = t, document.body.appendChild(s), s.click(), setTimeout(() => {
        document.body.removeChild(s), URL.revokeObjectURL(n)
    }, 0), showStatusMessage("Script downloaded")
}

function refreshScript() {
    scriptId ? (loadScriptContent(scriptId), showStatusMessage("Script refreshed")) : showStatusMessage("Cannot refresh new script", !0)
}

function deleteScript() {
    scriptId ? confirm("Are you sure you want to delete this script?") && chrome.runtime.sendMessage({
        action: "removeScript",
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script deleted"), setTimeout(() => {
            window.location.href = "editor.html"
        }, 1e3)) : showStatusMessage("Error deleting script", !0)
    }) : showStatusMessage("Cannot delete new script", !0)
}

function loadTempContentIfNeeded() {
    "true" === new URLSearchParams(window.location.search).get("loadTemp") && chrome.storage.local.get("tempScriptContent", e => {
        e.tempScriptContent ? (editor.setValue(e.tempScriptContent), chrome.storage.local.remove("tempScriptContent")) : console.error("No temporary script content found")
    })
}

function initializeEditor() {
    let t = document.getElementById("script-content");
    document.getElementById("line-numbers"), document.getElementById("save-script").addEventListener("click", saveScript), document.getElementById("cancel-edit").addEventListener("click", cancelEdit);
    var e = document.getElementById("download-script");
    e && e.addEventListener("click", downloadScript), (e = document.getElementById("refresh-script")) && e.addEventListener("click", refreshScript), (e = document.getElementById("delete-script")) && e.addEventListener("click", deleteScript), (e = document.getElementById("log-button")) && e.addEventListener("click", logScriptContent), t.addEventListener("input", () => {
        updateLineNumbers(), highlightSyntax(), updateCursorPosition()
    }), t.addEventListener("scroll", () => {
        syncScroll(), highlightSyntax()
    }), t.addEventListener("keydown", handleTabKey), t.addEventListener("click", updateCursorPosition), t.addEventListener("keyup", updateCursorPosition), document.getElementById("search-scripts").addEventListener("input", filterScripts), loadAllScripts(), scriptId ? loadScriptContent(scriptId) : (t.value = getScriptTemplate(), updateLineNumbers(), highlightSyntax()), urlParams.get("loadTemp") && chrome.storage.local.get("tempScriptContent", function(e) {
        e.tempScriptContent && (t.value = e.tempScriptContent, updateLineNumbers(), highlightSyntax(), chrome.storage.local.remove("tempScriptContent"))
    })
}

function getScriptTemplate() {
    return `// [script]
// name:Hello World Script,
// namespace:zedmonkey,
// version:1.0.0,
// description:Hello World!,
// match:*://*/*,
// grant:,

(function() {
    'use strict';
    
})();
`
}

function loadAllScripts() {
    chrome.runtime.sendMessage({
        action: "getScripts"
    }, e => {
        e && e.scripts ? renderScriptsList(e.scripts) : showStatusMessage("Error loading scripts", !0)
    })
}

function renderScriptsList(e) {
    let a = document.getElementById("scripts-list");
    a.innerHTML = "", 0 === e.length ? a.innerHTML = '<div class="empty-state">No scripts installed</div>' : e.forEach(e => {
        var t = document.createElement("div"),
            n = (t.className = "script-item", e.id === scriptId && t.classList.add("active"), getScriptType(e)),
            s = (t.style.borderLeftColor = "css" === n ? "#4caf50" : "bookmarklet" === n ? "#2196f3" : "#ffcc00", document.createElement("div")),
            o = (s.className = "script-info", document.createElement("div")),
            i = (o.style.display = "flex", o.style.alignItems = "center", document.createElement("span"));
        i.className = "script-badge " + n, i.textContent = n.toUpperCase(), o.appendChild(i), (n = document.createElement("div")).className = "script-name", n.style.display = "inline", n.textContent = e.metadata?.name || "Unnamed Script", o.appendChild(n), s.appendChild(o), (i = document.createElement("div")).className = "script-meta", i.textContent = `v${e.metadata?.version||"1.0"} • ` + (e.metadata?.match?.[0] || "*"), s.appendChild(i), e.metadata?.description && ((n = document.createElement("div")).className = "script-description", n.textContent = e.metadata.description, s.appendChild(n)), (o = document.createElement("label")).className = "toggle-switch", (i = document.createElement("input")).type = "checkbox", i.checked = !1 !== e.enabled, i.dataset.scriptId = e.id, i.addEventListener("change", toggleScriptEnabled), (n = document.createElement("span")).className = "slider", o.appendChild(i), o.appendChild(n), t.appendChild(s), t.appendChild(o), s.addEventListener("click", () => {
            window.location.href = `editor.html?id=${e.id}&name=` + encodeURIComponent(e.metadata?.name || "Script")
        }), a.appendChild(t)
    })
}

function getScriptType(e) {
    if (e.content) {
        if (e.metadata?.type) return e.metadata.type.toLowerCase();
        if (!e.content.includes("@resource") && !e.content.includes("@require")) {
            if (e.content.trim().startsWith("javascript:")) return "bookmarklet";
            e.content.includes("@-moz-document") || e.content.includes("@namespace") || e.content.includes("@media")
        }
    }
    return "js"
}

function toggleScriptEnabled(t) {
    let e = t.target.dataset.scriptId,
        n = t.target.checked;
    chrome.runtime.sendMessage({
        action: "toggleScriptEnabled",
        scriptId: e,
        enabled: n
    }, e => {
        e && e.success ? showStatusMessage("Script " + (n ? "enabled" : "disabled")) : (showStatusMessage("Error updating script state", !0), t.target.checked = !n)
    })
}

function filterScripts(e) {
    let s = e.target.value.toLowerCase();
    document.querySelectorAll(".script-item").forEach(e => {
        var t = e.querySelector(".script-name").textContent.toLowerCase(),
            n = e.querySelector(".script-meta").textContent.toLowerCase();
        t.includes(s) || n.includes(s) ? e.style.display = "flex" : e.style.display = "none"
    })
}

function loadScriptContent(e) {
    chrome.runtime.sendMessage({
        action: "getScriptContent",
        scriptId: e
    }, e => {
        e && e.content ? (document.getElementById("script-content").value = e.content, updateLineNumbers(), showStatusMessage("Script loaded successfully")) : showStatusMessage("Error loading script", !0)
    })
}

function saveScript() {
    var e, t = document.getElementById("script-content").value.trim();
    t ? (e = scriptId ? "updateScriptContent" : "addScript", chrome.runtime.sendMessage({
        action: e,
        scriptContent: t,
        scriptId: scriptId
    }, e => {
        e && e.success ? (showStatusMessage("Script saved successfully"), !scriptId && e.scriptId && (window.location.href = `editor.html?id=${e.scriptId}&name=` + encodeURIComponent(e.name || "Script"))) : showStatusMessage("Error saving script: " + (e.error || "Unknown error"), !0)
    })) : showStatusMessage("Please enter script content", !0)
}

function cancelEdit() {
    window.close()
}

function logScriptContent() {
    console.log(document.getElementById("script-content").value), showStatusMessage("Script content logged to console")
}

function updateLineNumbers() {
    var e = document.getElementById("script-content"),
        t = document.getElementById("line-numbers"),
        n = e.value.split("\n").length;
    t.innerHTML = "";
    for (let e = 1; e <= Math.max(10, n); e++) {
        var s = document.createElement("div");
        s.textContent = e, t.appendChild(s)
    }
}

function syncScroll() {
    var e = document.getElementById("script-content");
    document.getElementById("line-numbers").scrollTop = e.scrollTop
}

function handleTabKey(e) {
    var t, n;
    "Tab" === e.key && (e.preventDefault(), t = (e = e.target).selectionStart, n = e.selectionEnd, e.value = e.value.substring(0, t) + "  " + e.value.substring(n), e.selectionStart = e.selectionEnd = t + 2)
}

function showStatusMessage(e, t = !1) {
    let n = document.getElementById("status-message");
    n.textContent = e, n.style.color = t ? "#f44336" : "#4caf50", setTimeout(() => {
        n.textContent = ""
    }, 3e3)
}

function downloadScript() {
    var e = document.getElementById("script-content").value,
        t = document.getElementById("script-title").textContent.replace(/[^a-z0-9]/gi, "_").toLowerCase() + ".js",
        e = new Blob([e], {
            type: "text/javascript"
        });
    let n = URL.createObjectURL(e),
        s = document.createElement("a");
    s.href = n, s.download = t, document.body.appendChild(s), s.click(), setTimeout(() => {
        document.body.removeChild(s), URL.revokeObjectURL(n)
    }, 0), showStatusMessage("Script downloaded")
}

function refreshScript() {
    scriptId ? (loadScriptContent(scriptId), showStatusMessage("Script refreshed")) : showStatusMessage("Cannot refresh new script", !0)
}

function deleteScript() {
    if (!scriptId) {
        showStatusMessage("Cannot delete new script", true);
        return;
    }
    
    if (!confirm("Are you sure you want to permanently delete this script?")) return;

    chrome.runtime.sendMessage({
        action: "removeScript",
        scriptId: scriptId
    }, response => {
        if (response?.success) {
            showStatusMessage("Script deleted successfully");
            // Refresh the scripts list immediately
            loadAllScripts();
            // Redirect to editor home after short delay
            setTimeout(() => {
                window.location.href = "editor.html";
            }, 500);
        } else {
            console.error("Delete failed:", response?.error);
            showStatusMessage(`Delete failed: ${response?.error || "Unknown error"}`, true);
        }
    });
}
document.getElementById("script-title").textContent = scriptName, document.addEventListener("DOMContentLoaded", initializeEditor), document.addEventListener("DOMContentLoaded", () => {
    loadTempContentIfNeeded()
}), document.addEventListener("DOMContentLoaded", initializeEditor), document.addEventListener("DOMContentLoaded", () => {
    loadTempContentIfNeeded()
}), document.addEventListener("DOMContentLoaded", initializeEditor);

// Add these functions to the existing JavaScript file

// Initialize the import functionality
function initializeImport() {
    const importButton = document.getElementById('import-button');
    const importDropdown = document.getElementById('import-dropdown');
    const importLocal = document.getElementById('import-local');
    const importUrl = document.getElementById('import-url');
    const importCloud = document.getElementById('import-cloud');
    const createNewScript = document.getElementById('create-new-script');
    
    // Create file input element
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.id = 'file-input';
    fileInput.accept = '.js,.user.js,.txt';
    document.body.appendChild(fileInput);
    
    // Create URL import modal
    createUrlImportModal();
    
    // Toggle dropdown when clicking the import button
    importButton.addEventListener('click', (e) => {
        e.stopPropagation();
        importDropdown.classList.toggle('show');
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
        importDropdown.classList.remove('show');
    });
    
    // Prevent dropdown from closing when clicking inside it
    importDropdown.addEventListener('click', (e) => {
        e.stopPropagation();
    });

    // Handle new script creation
    createNewScript.addEventListener('click', () => {
        // If we're already on a new script page, just reset the content
        if (!scriptId) {
            const scriptContent = document.getElementById('script-content');
            scriptContent.value = getScriptTemplate();
            updateLineNumbers();
            highlightSyntax();
            showStatusMessage('New script template loaded');
        } else {
            // Navigate to a new script page
            window.location.href = 'editor.html';
        }
        importDropdown.classList.remove('show');
    });
    
    // Handle local file import
    importLocal.addEventListener('click', () => {
        fileInput.click();
        importDropdown.classList.remove('show');
    });
    
    // Handle file selection
    fileInput.addEventListener('change', handleFileImport);
    
    // Handle URL import
    importUrl.addEventListener('click', () => {
        showUrlImportModal();
        importDropdown.classList.remove('show');
    });
    
    // Handle cloud import
    importCloud.addEventListener('click', () => {
        handleCloudImport();
        importDropdown.classList.remove('show');
    });
}

// Create URL import modal
function createUrlImportModal() {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.id = 'url-modal';
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">Import Script from URL</div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="script-url">Script URL</label>
                    <input type="url" id="script-url" placeholder="https://example.com/script.js">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn secondary" id="cancel-url-import">Cancel</button>
                <button class="btn primary" id="confirm-url-import">Import</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listeners
    document.getElementById('cancel-url-import').addEventListener('click', () => {
        hideUrlImportModal();
    });
    
    document.getElementById('confirm-url-import').addEventListener('click', () => {
        const url = document.getElementById('script-url').value.trim();
        if (url) {
            importScriptFromUrl(url);
            hideUrlImportModal();
        }
    });
    
    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            hideUrlImportModal();
        }
    });
}

// Show URL import modal
function showUrlImportModal() {
    const modal = document.getElementById('url-modal');
    modal.classList.add('show');
    document.getElementById('script-url').value = '';
    document.getElementById('script-url').focus();
}

// Hide URL import modal
function hideUrlImportModal() {
    const modal = document.getElementById('url-modal');
    modal.classList.remove('show');
}

// Handle file import
function handleFileImport(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(event) {
        const content = event.target.result;
        loadImportedScript(content, file.name);
    };
    reader.readAsText(file);
    
    // Reset file input
    e.target.value = '';
}

// Import script from URL
function importScriptFromUrl(url) {
    showStatusMessage('Fetching script from URL...', false);
    
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.text();
        })
        .then(content => {
            const filename = url.split('/').pop() || 'script.js';
            loadImportedScript(content, filename);
        })
        .catch(error => {
            console.error('Error fetching script:', error);
            showStatusMessage(`Error fetching script: ${error.message}`, true);
        });
}

// Handle cloud import
function handleCloudImport() {
    // This would typically integrate with cloud provider APIs
    // For now, we'll show a message about the feature being in development
    showStatusMessage('Cloud import feature coming soon!', false);
    
    // In a real implementation, you would:
    // 1. Authenticate with the cloud provider
    // 2. Show a file picker UI
    // 3. Download the selected file
    // 4. Load the script content
}

// Load imported script content
function loadImportedScript(content, filename) {
    // Set the content in the editor
    const scriptContent = document.getElementById('script-content');
    scriptContent.value = content;
    
    // Update the script title if it's a new script
    if (!scriptId) {
        const scriptTitle = document.getElementById('script-title');
        const cleanName = filename.replace(/\.(js|user\.js|txt)$/, '');
        scriptTitle.textContent = cleanName;
    }
    
    // Update line numbers and syntax highlighting
    updateLineNumbers();
    highlightSyntax();
    
    showStatusMessage(`Script "${filename}" imported successfully`, false);
}

// Add this to the existing initialization code
document.addEventListener('DOMContentLoaded', () => {
    initializeImport();
});

